{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contents \u00b6 Why Lessons Dev Environments Lemon Labs are supported by under the TRIPODS-X Schedule \u00b6 Day 1 (Monday Oct 17, 2022) \u00b6 Skills Speed Connection Day in the life of a ML/AI project (group) Building Community toolboxes Day 2 (Tuesday Oct 18, 2022) \u00b6 Manuscript Discussion Learning Booths Acknowledgements \u00b6 Participant List: \u00b6 Andrew Bennett Rebecca Brink Chi-kwan Chan Graham Derryberry Greg LoRe Arthur Maccabe Kristen Mecke Nirav Merchant Eric Lyons Mona Papes Daven Quinn Samapriya Roy Edwin Skidmore Mary Margaret Sprinkle Tyson Lee Swetnam Anthony Walker Jason Williams Bruce Wilson","title":"Home"},{"location":"#contents","text":"Why Lessons Dev Environments Lemon Labs are supported by under the TRIPODS-X","title":"Contents"},{"location":"#schedule","text":"","title":"Schedule"},{"location":"#day-1-monday-oct-17-2022","text":"Skills Speed Connection Day in the life of a ML/AI project (group) Building Community toolboxes","title":"Day 1 (Monday Oct 17, 2022)"},{"location":"#day-2-tuesday-oct-18-2022","text":"Manuscript Discussion Learning Booths","title":"Day 2 (Tuesday Oct 18, 2022)"},{"location":"#acknowledgements","text":"","title":"Acknowledgements"},{"location":"#participant-list","text":"Andrew Bennett Rebecca Brink Chi-kwan Chan Graham Derryberry Greg LoRe Arthur Maccabe Kristen Mecke Nirav Merchant Eric Lyons Mona Papes Daven Quinn Samapriya Roy Edwin Skidmore Mary Margaret Sprinkle Tyson Lee Swetnam Anthony Walker Jason Williams Bruce Wilson","title":"Participant List:"},{"location":"cacao/","text":"CACAO Webinar https://cyverse.org/cacao","title":"5. Cloud Automation"},{"location":"codespaces/","text":"GitHub CodeSpaces \u00b6 For this workshop, we are working in GitHub CodeSpaces . You will be given access to an organization where CodeSpaces have been enabled for the duration of the workshop. What is a 'Development Environment'? A development environment or \"dev environment\" for short, is a place where software can be written and tested without impacting users or \"production environments\" as part of the software lifecycle. Containers-within-containers are another way to think about this paradigm. We create a containerized Integrated Development Environment (IDE) container which has all of our favorite software development tools and visual software (e.g., VSCode) where we can write our program and try out new package installations. Terminology: Development Environment : Environment for development tasks such as designing, programming, debugging, etc. Test Environment : an environment with the same configuration as the \"production environment\" where testing can be done without interrupting the main service, also called Q/A or \"Quality Assurance Environment\". Staging Environment : Where the work from testing is merged into the built system before public release. Production Environment : The environment where users interact with the now-public tools. \"CodeSpaces\" are virtual services which provides \"cloud-based development environment\" for software programmers and data scientists. GitHub's CodeSpace is run on cloud services (Microsoft Azure), and links with your GitHub account for a seamless experience working on code in a Git repository. How can you get your own educational GitHub & CodeSpaces? You can gain access to discounted GitHub CodeSpaces by enrolling your GitHub account with GitHub Education and then applying the educator discount to your organizations and repos. Not interested in using GitHub based dev environments? Check out GitPod or GitLub Education and Developer Environments Starting a CodeSpace \u00b6 When a GitHub Organization and Repository have CodeSpaces enabled you will see a \"Code\" button above the README.md Click on the \"Code\" button and start a new CodeSpace Select the size of the CodeSpace you want (2-4 cores and 4GB to 8GB of RAM should be plenty for today) Click \"Create CodeSpace\" You will be taken to a loading screen, and after a few moments (<2 minutes) your browser will change to a VS Code instance in your browser. Notice, the GitHub repository where you initiated the CodeSpace is set as the working directory of the EXPLORER in the upper left side of VS Code interface. You're in your Git repo, and are able to work with Python, Docker, Node, or any one of many featured developer tools. Further, you can install any tools you like!","title":"CodeSpaces"},{"location":"codespaces/#github-codespaces","text":"For this workshop, we are working in GitHub CodeSpaces . You will be given access to an organization where CodeSpaces have been enabled for the duration of the workshop. What is a 'Development Environment'? A development environment or \"dev environment\" for short, is a place where software can be written and tested without impacting users or \"production environments\" as part of the software lifecycle. Containers-within-containers are another way to think about this paradigm. We create a containerized Integrated Development Environment (IDE) container which has all of our favorite software development tools and visual software (e.g., VSCode) where we can write our program and try out new package installations. Terminology: Development Environment : Environment for development tasks such as designing, programming, debugging, etc. Test Environment : an environment with the same configuration as the \"production environment\" where testing can be done without interrupting the main service, also called Q/A or \"Quality Assurance Environment\". Staging Environment : Where the work from testing is merged into the built system before public release. Production Environment : The environment where users interact with the now-public tools. \"CodeSpaces\" are virtual services which provides \"cloud-based development environment\" for software programmers and data scientists. GitHub's CodeSpace is run on cloud services (Microsoft Azure), and links with your GitHub account for a seamless experience working on code in a Git repository. How can you get your own educational GitHub & CodeSpaces? You can gain access to discounted GitHub CodeSpaces by enrolling your GitHub account with GitHub Education and then applying the educator discount to your organizations and repos. Not interested in using GitHub based dev environments? Check out GitPod or GitLub Education and Developer Environments","title":"GitHub  CodeSpaces"},{"location":"codespaces/#starting-a-codespace","text":"When a GitHub Organization and Repository have CodeSpaces enabled you will see a \"Code\" button above the README.md Click on the \"Code\" button and start a new CodeSpace Select the size of the CodeSpace you want (2-4 cores and 4GB to 8GB of RAM should be plenty for today) Click \"Create CodeSpace\" You will be taken to a loading screen, and after a few moments (<2 minutes) your browser will change to a VS Code instance in your browser. Notice, the GitHub repository where you initiated the CodeSpace is set as the working directory of the EXPLORER in the upper left side of VS Code interface. You're in your Git repo, and are able to work with Python, Docker, Node, or any one of many featured developer tools. Further, you can install any tools you like!","title":"Starting a CodeSpace"},{"location":"daac_aws/","text":"DAACs \u00b6 Speaker: Bruce NASA's Earth Observing System Data and Information System (EOSDIS) Distributed Active Archive Centers (DAAC) are moving to AWS They're adopting an open access, unrestricted data policy which will allow users to download data without authentication.","title":"2. NASA DAAC migration"},{"location":"daac_aws/#daacs","text":"Speaker: Bruce NASA's Earth Observing System Data and Information System (EOSDIS) Distributed Active Archive Centers (DAAC) are moving to AWS They're adopting an open access, unrestricted data policy which will allow users to download data without authentication.","title":"DAACs"},{"location":"diverse_data/","text":"MacroStrat RockD App Developing a digital geologic map of the earth's surface and its stratigraphy Respecting the progress in geologic dating techniques that have improved Sparrow-Data Speaker: Samapriya Google Earth Engine Community Data Catalog","title":"4. Diverse Data Paradigms"},{"location":"physics_ml/","text":"Physics Informed Neural Networks (PINN) Knowledge Guided Machine Learning (KGML)","title":"3. Physics informed ML"},{"location":"research_objects/","text":"Learning Objectives After this lesson, you should be able to: Describe tools and approaches to creating research objects Describe best practices for reproducible research Understand benefits of establishing version control Research Objects \u00b6 Broadly, Research Objects (RO) are defined as a method for identification, aggregation, and exchange of scholarly information. Turing Way Guide to Reproducible Research Governance Documents \u00b6 Definition Project Governance is the set of rules, procedures and policies that determine how projects are managed and overseen. \"The set of policies, regulations, functions, processes, and procedures and responsibilities that define the establishment, management and control of projects, programmes or portfolios.\" - APM (2012) , open.edu Wikipedia Definition No matter how small, i.e., even single person-run projects, a good Project Governance structure can help keep work on track and headed toward a timely finish. Establishing a project governance document at the onset of a project is a good way of setting boundaries, roles and responsibilities, pre-registration about what deliverables are expected, and what the consequences will be for breaking trust. Example Governance Documents Munoz-Torres et al. 2020 Documentation \u00b6 This website is rendered using GitHub Pages using MkDocs and the Material theme for MkDocs. Other popular website generators for GitHub Pages are Jekyll Theme or Bootstrap.js . ReadTheDocs.org has become a popular tool for developing web-based documentation. Think of RTD as \"Continuous Documentation\". Bookdown is an open-source R package that facilitates writing books and long-form articles/reports with R Markdown. Quarto is an open-source scientific and technical publishing system built on Pandoc Confluence Wikis (CyVerse) are another tool for documenting your workflow. Things to remember about Documentation Documentation should be written in such a way that people who did not write the documentation can read and then use or read and then teach others in the applications of the material. Documentation is best treated as a living document, but version control is necessary to maintain it Technology changes over time, expect to refresh documentation every 3-5 years as your projects age and progress. GitHub Pages You can pull templates from other GitHub users for your website, e.g. Jekyll themes GitHub pages are free, fast, and easy to build, but limited in use of subdomain or URLs. ReadTheDocs publishing websites via ReadTheDocs.com costs money. You can work in an offline state, where you develop the materials and publish them to your localhost using Sphinx You can work on a website template in a GitHub repository, and pushes are updated in near real time using ReadTheDocs.com. Material MkDocs publish via GitHub Actions Uses open source Material or ReadTheDocs Themes Bookdown Bookdown websites can be hosted by RStudio Connect You can publish a Bookdown website using Github Pages Quarto Build a website using Quarto's template builder Build with Github Pages JupyterBook Based on Project Jupyter ipynb and MarkDown Uses conda package management GitBook GitBook websites use MarkDown syntax Free for open source projects, paid plans are available GitHub \u00b6 Github Actions CodeSpaces Containers \u00b6 Docker containerd Orchestration \u00b6 Kubernetes simple-jupyterhub JupyterHub Digital Object Identifier \u00b6 Zenodo DataCite Hands-On \u00b6 Log into GitHub Import Self-Assessment \u00b6 Research Objects must include all components of research: governance document, manuals, documentation, research papers, analysis code, data, software containers Answer While a Research Object may include the entire kitchen sink from a research project, it does NOT always contain all of these things. Fundamentally, a RO should contain enough information and detail to reproduce a scientific study from its linked or self-contained parts. Components like large datasets may not be a part of the RO, but the code or analysis scripts should have the ability to connect to or stream those data.","title":"1. Research Objects"},{"location":"research_objects/#research-objects","text":"Broadly, Research Objects (RO) are defined as a method for identification, aggregation, and exchange of scholarly information. Turing Way Guide to Reproducible Research","title":"Research Objects"},{"location":"research_objects/#governance-documents","text":"Definition Project Governance is the set of rules, procedures and policies that determine how projects are managed and overseen. \"The set of policies, regulations, functions, processes, and procedures and responsibilities that define the establishment, management and control of projects, programmes or portfolios.\" - APM (2012) , open.edu Wikipedia Definition No matter how small, i.e., even single person-run projects, a good Project Governance structure can help keep work on track and headed toward a timely finish. Establishing a project governance document at the onset of a project is a good way of setting boundaries, roles and responsibilities, pre-registration about what deliverables are expected, and what the consequences will be for breaking trust. Example Governance Documents Munoz-Torres et al. 2020","title":"Governance Documents"},{"location":"research_objects/#documentation","text":"This website is rendered using GitHub Pages using MkDocs and the Material theme for MkDocs. Other popular website generators for GitHub Pages are Jekyll Theme or Bootstrap.js . ReadTheDocs.org has become a popular tool for developing web-based documentation. Think of RTD as \"Continuous Documentation\". Bookdown is an open-source R package that facilitates writing books and long-form articles/reports with R Markdown. Quarto is an open-source scientific and technical publishing system built on Pandoc Confluence Wikis (CyVerse) are another tool for documenting your workflow. Things to remember about Documentation Documentation should be written in such a way that people who did not write the documentation can read and then use or read and then teach others in the applications of the material. Documentation is best treated as a living document, but version control is necessary to maintain it Technology changes over time, expect to refresh documentation every 3-5 years as your projects age and progress. GitHub Pages You can pull templates from other GitHub users for your website, e.g. Jekyll themes GitHub pages are free, fast, and easy to build, but limited in use of subdomain or URLs. ReadTheDocs publishing websites via ReadTheDocs.com costs money. You can work in an offline state, where you develop the materials and publish them to your localhost using Sphinx You can work on a website template in a GitHub repository, and pushes are updated in near real time using ReadTheDocs.com. Material MkDocs publish via GitHub Actions Uses open source Material or ReadTheDocs Themes Bookdown Bookdown websites can be hosted by RStudio Connect You can publish a Bookdown website using Github Pages Quarto Build a website using Quarto's template builder Build with Github Pages JupyterBook Based on Project Jupyter ipynb and MarkDown Uses conda package management GitBook GitBook websites use MarkDown syntax Free for open source projects, paid plans are available","title":"Documentation"},{"location":"research_objects/#github","text":"Github Actions CodeSpaces","title":"GitHub"},{"location":"research_objects/#containers","text":"Docker containerd","title":"Containers"},{"location":"research_objects/#orchestration","text":"Kubernetes simple-jupyterhub JupyterHub","title":"Orchestration"},{"location":"research_objects/#digital-object-identifier","text":"Zenodo DataCite","title":"Digital Object Identifier"},{"location":"research_objects/#hands-on","text":"Log into GitHub Import","title":"Hands-On"},{"location":"research_objects/#self-assessment","text":"Research Objects must include all components of research: governance document, manuals, documentation, research papers, analysis code, data, software containers Answer While a Research Object may include the entire kitchen sink from a research project, it does NOT always contain all of these things. Fundamentally, a RO should contain enough information and detail to reproduce a scientific study from its linked or self-contained parts. Components like large datasets may not be a part of the RO, but the code or analysis scripts should have the ability to connect to or stream those data.","title":"Self-Assessment"},{"location":"why/","text":"Why make lemonade out of lemons? \u00b6 The idea for this project started behind the concept of failure ( lemons) in data science collaboration, and how to successfully address these failures to make lemonade. Technical and non-technical barriers to effective collaboration often hamper progress, especially when highly productive groups with diverse expertise and computational backgrounds work on common problems. Overcoming these barriers and learning from collective experience is critical for ensuring successful outcomes. The two-part workshop series will be conducted in an idea/innovation labs format with meeting facilitators. The goal is to bring together thought-leaders and practitioners in data-driven open science projects with participants from areas emphasizing Astronomy, Earth Sciences, Computational and Information Sciences, Mathematics, and Cyberinfrastructure. We\u2019ve dubbed the two workshops \u201cLemon\u201d and \u201cLemonade\u201d labs. During the Lemon Lab (Spring 2019), we openly discussed challenges in inter- and transdisciplinary collaborations and brainstorm ideas on improve productivity and outcomes. Our publication \"Ten simple rules to cultivate transdisciplinary collaboration in data science\" was grown out of that effort. At the subsequent Lemonade Lab (Fall 2022), participants will prototype ideas and solutions identified during the Lemon Lab workshop in a codefest/hackathon-style event \u2014 turning \u201clemons\u201d into thirst-quenching \u201clemonade.\u201d How could you create the ML knowledge commons for your science domain?","title":"Why"},{"location":"why/#why-make-lemonade-out-of-lemons","text":"The idea for this project started behind the concept of failure ( lemons) in data science collaboration, and how to successfully address these failures to make lemonade. Technical and non-technical barriers to effective collaboration often hamper progress, especially when highly productive groups with diverse expertise and computational backgrounds work on common problems. Overcoming these barriers and learning from collective experience is critical for ensuring successful outcomes. The two-part workshop series will be conducted in an idea/innovation labs format with meeting facilitators. The goal is to bring together thought-leaders and practitioners in data-driven open science projects with participants from areas emphasizing Astronomy, Earth Sciences, Computational and Information Sciences, Mathematics, and Cyberinfrastructure. We\u2019ve dubbed the two workshops \u201cLemon\u201d and \u201cLemonade\u201d labs. During the Lemon Lab (Spring 2019), we openly discussed challenges in inter- and transdisciplinary collaborations and brainstorm ideas on improve productivity and outcomes. Our publication \"Ten simple rules to cultivate transdisciplinary collaboration in data science\" was grown out of that effort. At the subsequent Lemonade Lab (Fall 2022), participants will prototype ideas and solutions identified during the Lemon Lab workshop in a codefest/hackathon-style event \u2014 turning \u201clemons\u201d into thirst-quenching \u201clemonade.\u201d How could you create the ML knowledge commons for your science domain?","title":"Why make lemonade out of lemons?"}]}